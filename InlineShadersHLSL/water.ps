#include "common.h"

struct   vf
{
	float2	tbase	: TEXCOORD0;	// base
	float4	tnorm0	: TEXCOORD1;	// nm0
	float2	tnorm1	: TEXCOORD2;	// nm1
	float3	M1		: TEXCOORD3;
	float3	M2		: TEXCOORD4;
	float3	M3		: TEXCOORD5;
	float3	v2point	: TEXCOORD6;
#ifdef	USE_SOFT_WATER
#ifdef	NEED_SOFT_WATER
	float4	tctexgen: TEXCOORD7;
#endif	//	USE_SOFT_WATER
#endif	//	NEED_SOFT_WATER	
	float4	c0		: COLOR0;
	float	fog		: FOG;
	float4	hpos	: SV_Position;
};

Texture2D	s_nmap;
TextureCube	s_env0;
TextureCube	s_env1;

Texture2D	s_leaves;

uniform float4 ogse_c_rain;			// x - rmap dist, y - flood level, z - wet level, w - rain intensity

#if defined(USE_SOFT_WATER) && defined(NEED_SOFT_WATER)
float3	water_intensity;
#endif	//	defined(USE_SOFT_WATER) && defined(NEED_SOFT_WATER)

////////////////////////////////////////////////////////////////////////////////
// Pixel

float3 specular_phong(float3 pnt, float3 normal, float3 light_direction)
{
	return L_sun_color.rgb * pow( abs( dot(normalize(pnt + light_direction), normal) ), 256.0);
}

float2 hash22(float2 p)
{
	float3 p3 = frac(float3(p.xyx) * float3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yzx+19.19);
    return frac((p3.xx+p3.yz)*p3.zy);
}

float hash12(float2 p)
{
	float3 p3  = frac(float3(p.xyx) * .1031);
    p3 += dot(p3, p3.yzx + 19.19);
    return frac((p3.x + p3.y) * p3.z);
}

float ripples(float2 tc, float size)
{
	float2 uv = tc * size;
    float2 p0 = floor(uv);

    float2 circles;
    for (int j = -2; j <= 2; ++j)
    {
        for (int i = -2; i <= 2; ++i)
        {
			float2 pi = p0 + float2(i, j);
            float2 hsh = hash22(pi);
            float2 p = pi + hash22(hsh);

            float t = frac(0.35f*timers.x + hash12(hsh));
            float2 v = p - uv;
            float d = length(v) - (float(2.f) + 1.)*t;

            float h = 1e-3;

			//1st pass
            float d1 = d - h;
            float p1 = sin(31.*d1) * smoothstep(-0.6, -0.3, d1) * smoothstep(0., -0.3, d1);
			//sec pass
            float d2 = d + h;
            float p2 = sin(31.*d2) * smoothstep(-0.6, -0.3, d2) * smoothstep(0., -0.3, d2);
            circles += 0.5 * normalize(v) * ((p2 - p1) / (2. * h) * (1. - t) * (1. - t));
        }
    }
    circles /= float((2*3+1)*(2*2+1));

    float intensity = lerp(0.025f, 0.15, smoothstep(0.1, 0.6, frac(0.05 + 0.05)*2.-1.));
    float3 n = float3(circles, sqrt(1. - dot(circles, circles)));
	
	float final = 10.*pow(clamp(dot(n, normalize(float3(1., 0.7, 0.5))), 0., 1.), 6.);
	return final;
}

#ifdef GBUFFER_OPTIMIZATION
float4 main( vf I, float4 pos2d : SV_Position ) : SV_Target
#else
float4 main( vf I ) : SV_Target
#endif
{
	float4 	base;
			base = s_base.Sample( smp_base, I.tbase);
	
	float3	n0	= s_nmap.Sample( smp_base, I.tnorm0.xy);
	float3	n1	= s_nmap.Sample( smp_base, I.tnorm0.zw);
	float3	Navg = n0 + n1 - 1;
			Navg += ripples(I.tnorm0,15.f)*ogse_c_rain.x;

	float3	Nw = mul (float3x3(I.M1, I.M2, I.M3), Navg);
			Nw = normalize (Nw);
	float3	v2point	= normalize (I.v2point);
	float3	vreflect = reflect(v2point, Nw);
	float3  vreflectabs = abs(vreflect);
	float   vreflectmax = max(vreflectabs.x, max(vreflectabs.y, vreflectabs.z));
			vreflect /= vreflectmax;
	if (vreflect.y < 0.999)	
			vreflect.y = vreflect.y*2-1;     // fake remapping

	float3	env0 = s_env0.Sample( smp_rtlinear, vreflect);
	float3	env1 = s_env1.Sample( smp_rtlinear, vreflect);
	float3	env	= lerp (env0,env1,L_ambient.w);
			env	*= env*2;

	float   fresnel = saturate(pow(1 - dot(-1 * v2point.xyz, Nw.xyz), 1));
	
	base.rgb *= I.c0.xyz;

	float3	c_reflection = env*fresnel;

	float3	final = lerp(c_reflection,base.rgb,base.a);
			final += specular_phong(v2point, Nw.xyz, L_sun_dir_w)*4.f;
			final *= I.c0*2;

#ifdef	NEED_SOFT_WATER

	float	alpha = 0.25f*fresnel;                        // 1=full env, 0=no env

#ifdef	USE_SOFT_WATER
	//	Igor: additional depth test
	float2 PosTc = I.tctexgen.xy/I.tctexgen.z;
#ifdef GBUFFER_OPTIMIZATION
	gbuffer_data gbd = gbuffer_load_data( PosTc, pos2d );
#else
	gbuffer_data gbd = gbuffer_load_data( PosTc );
#endif
	float4 _P = float4( gbd.P, gbd.mtl );
	float waterDepth = _P.z-I.tctexgen.z;

	//	water fog
	float  fog_exp_intens = -4.0h;
	float fog = 1-exp(fog_exp_intens*waterDepth);
	float3 Fc = float3( 0.1h, 0.1h, 0.1h) * water_intensity.r;
	final = lerp (Fc, final, alpha);

	alpha = min(alpha,saturate(waterDepth));

	alpha = max(fog,alpha);

	//	Leaves
	float4	leaves = s_leaves.Sample( smp_base, I.tbase);
			leaves.rgb *= water_intensity.r;
	float	calc_cos = -dot(float3(I.M1.z, I.M2.z, I.M3.z),  normalize(v2point));
	float	calc_depth = saturate(waterDepth*calc_cos);
	float	fLeavesFactor = smoothstep(0.025, 0.05, calc_depth );
			fLeavesFactor *= smoothstep(0.1, 0.075, calc_depth );
	final = lerp(final, leaves, leaves.a*fLeavesFactor);
	alpha = lerp(alpha, leaves.a, leaves.a*fLeavesFactor);

#endif	//	USE_SOFT_WATER

	//	Fogging
	final = lerp(fog_color, final, I.fog);
	alpha *= I.fog*I.fog;

	return  float4(final, alpha);

#else	//	NEED_SOFT_WATER

	//	Fogging
	final = lerp(fog_color, final, I.fog);
	return float4(final, I.fog*I.fog);

#endif	//	NEED_SOFT_WATER
}
