#include "common.h"

#undef ULTRA_SHADOWS_ON
#undef USE_ULTRA_SHADOWS

//#define USE_VOLUMETRIC_FOG		// включить рассеивание солнечных лучей
#define VOLUMETRIC_FOG_DENSITY 1.8	// плотность

#define USE_VOLUMETRIC_JITTER 				// включить шум в лучах
#define VOLUMETRIC_JITTER_SIZE int(64.h * 2.f) // размер шума

#define EPSDEPTH 0.0001

#ifdef SUN_SHAFTS_QUALITY
#if SUN_SHAFTS_QUALITY == 1
#define FILTER_LOW
#define RAY_SAMPLES 10
#elif SUN_SHAFTS_QUALITY == 2
#define FILTER_LOW
#define RAY_SAMPLES 30
#elif SUN_SHAFTS_QUALITY == 3
#define FILTER_LOW
#define RAY_SAMPLES 60
#endif
#endif

#ifndef FILTER_LOW
#ifdef USE_MINMAX_SM
#define SM_MINMAX
#endif
#endif

#include "shadow.h"

float4	volume_range;	//	x - near plane, y - far plane
float4	sun_shafts_intensity;
uniform	float4	screen_res;

#ifdef USE_VOLUMETRIC_FOG
// Calculates the Mie phase function
float getMiePhase(float fCos, float fCos2)
{
	return 1.5 * (1.0 + fCos2) / pow(2.0 - 1.0 * fCos, 1.5);
}
#endif


#ifdef MSAA_OPTIMIZATION
float4 	main (v2p_volume  I, uint iSample : SV_SAMPLEINDEX  ) : SV_Target
#else
float4 	main (v2p_volume  I) : SV_Target
#endif
{
#ifndef SUN_SHAFTS_QUALITY
	return 0.0;
#else // SUN_SHAFTS_QUALITY

	float max_density = sun_shafts_intensity;

	float2 tc = I.tc.xy / I.tc.w;
	float4 pos2d = I.hpos;

	gbuffer_data gbd = gbuffer_load_data( GLD_P(tc, pos2d, ISAMPLE) );

	float3 P = gbd.P;

#ifndef USE_VOLUMETRIC_JITTER
	//	Fixed ray length, fixed step dencity
	float3 direction = P / RAY_SAMPLES;
#else  //	USE_VOLUMETRIC_JITTER
	float jit = jitter0.Sample(smp_jitter, tc * screen_res.x / VOLUMETRIC_JITTER_SIZE).x;
	float coeff = (RAY_SAMPLES - jit) / (RAY_SAMPLES * RAY_SAMPLES);
	float3 direction = P * coeff;
#endif //	USE_VOLUMETRIC_JITTER

	float depth = P.z;
	float deltaDepth = direction.z;

	float4 current = mul(m_shadow, float4(P, 1));
	float4 delta = mul(m_shadow, float4(direction, 0));

	float res = 0;
	float density = max_density / RAY_SAMPLES;

#ifndef USE_VOLUMETRIC_FOG
	if (depth < EPSDEPTH)
		res = max_density;
#endif

	[unroll(RAY_SAMPLES)] for (int i = 0; i < RAY_SAMPLES; ++i)
	{
		if (depth > 0.3)
		{
#ifndef FILTER_LOW
			res += density * shadow(current);
#else  // FILTER_LOW
			res += density * sample_hw_pcf(current, 0);
#endif // FILTER_LOW
		}

		depth -= deltaDepth;
		current -= delta;
	}

	float4 FinalColor = Ldynamic_color;

#ifdef USE_VOLUMETRIC_FOG
	float distance = length(P);
	static const float fogDensity = 0.01 * VOLUMETRIC_FOG_DENSITY;
	res *= saturate(pow(1.0 - exp(-distance * fogDensity), 2));

	float fCos = dot(-Ldynamic_dir.xyz, P) / distance;
	float fCos2 = fCos * fCos;
	float fPhase = getMiePhase(fCos, fCos2);

	if (distance < EPSDEPTH)
		return max_density * FinalColor;

	return res * FinalColor * saturate(fPhase);
#else
	return res * FinalColor;
#endif

#endif //	SUN_SHAFTS_QUALITY
}
