#include "common.h"
#include "mblur.h"

uniform float4 screen_res;
uniform float4 post_effects;
uniform float4 test2;

#include "dof.h"

//////////////////////////////////////////////////////////////////////////////////////////
#ifndef USE_MSAA
Texture2D 			s_distort;
#define	EPSDEPTH	0.001
#else
Texture2DMS<float4, MSAA_SAMPLES> s_distort;
#define	EPSDEPTH	0.001
#endif
#define	EPSDEPTH	0.0001
//////////////////////////////////////////////////////////////////////////////////////////
// Pixel

struct c2_out
{
	float3	Color : SV_Target;
#ifdef USE_MSAA
	float	Depth : SV_Depth;
#endif	
};

c2_out main( v2p_aa_AA I )
{
	c2_out	res;
	res.Color = float3(0,0,0);

	int iSample = 0;

#ifdef GBUFFER_OPTIMIZATION
	gbuffer_data gbd	= gbuffer_load_data(I.Tex0, I.HPos, iSample );
#else
	gbuffer_data gbd	= gbuffer_load_data(I.Tex0, iSample );
#endif
	
#ifdef 	USE_DISTORT
  	float 	depth 	= gbd.P.z;
#ifndef USE_MSAA
	float4 	distort	= s_distort.Sample(smp_nofilter, I.Tex0);
#else // USE_MSAA
	float4 	distort	= s_distort.Load( int3( I.Tex0 * pos_decompression_params2.xy, 0 ), iSample );
#endif // USE_MSAA
	float2	offset	= (distort.xy-(127.0h/255.0h))*def_distort;  // fix newtral offset
	float2	center	= I.Tex0 + offset;

#ifdef GBUFFER_OPTIMIZATION
	gbuffer_data gbdx	= gbuffer_load_data_offset(I.Tex0, center, I.HPos, iSample );
#else
	gbuffer_data gbdx	= gbuffer_load_data_offset(I.Tex0, center, iSample);
#endif

	float 	depth_x	= gbdx.P.z;
	if ((depth_x+EPSDEPTH)<depth)	center	= I.Tex0;	// discard new sample
#else // USE_DISTORT
	float2	center 	= I.Tex0;
#endif

	float4 img = s_image.Sample(smp_rtlinear, center);
	
//	float4 	bloom	= s_bloom.Sample( smp_rtlinear, center);
	

#ifdef 	USE_DISTORT
//		float3 blurred = bloom * def_hdr;
//			img		= lerp	(img,blurred,distort.z);
#endif

 	float4 final = img;// combine_bloom		(img,bloom);

	res.Color = final;
#ifdef USE_MSAA
	float4 ptp = mul(m_P, float4(gbd.P, 1));
	res.Depth = ptp.w==0?1:ptp.z/ptp.w;
#endif	
	
	return res;
}
